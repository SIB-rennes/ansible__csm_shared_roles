---
- name: Make a unique sha1
  set_fact:
    unique_id: "{{ ansible_date_time.epoch | hash('sha1') }}"

###### List fs tree of src
- name: List files
  find:
    paths: "{{stack_src_folder}}"
    file_type: file
    recurse: yes
  register: files

- name: List folders
  find:
    paths: "{{stack_src_folder}}"
    file_type: directory
    recurse: yes
  register: folders
  
###### Construction of correct paths
- name: Make file paths relative
  command: "realpath --relative-to={{stack_src_folder}} {{item.path}}"
  register: files_rel_path_cmd
  loop: "{{files.files}}"
- name: Make file paths relative
  set_fact:
    relative_files: "{{files_rel_path_cmd.results | map(attribute='stdout') | list}}"

- name: Make folder paths relative
  command: "realpath --relative-to={{stack_src_folder}} {{item.path}}"
  register: relative_folder_path_cmd
  loop: "{{folders.files}}"
- name: Make folder paths relative
  set_fact:
    relative_folders: "{{relative_folder_path_cmd.results | map(attribute='stdout') | list}}"

########### Handle tmp stack dest folder
- name: contents of tmp stack dest folder
  find:
    paths: "{{stack_tmp_dest_folder}}"
    file_type: any
  register: stack_tmp_dest_folder_content

- name: "Fail if tmp stack dest folder is not empty"
  ansible.builtin.fail:
    msg: "{{stack_tmp_dest_folder}} is not empty. Aborting."
  when: stack_tmp_dest_folder_content.matched > 0

- name: Cleanup tmp stack dest folder
  file:
    path: "{{stack_tmp_dest_folder}}"
    state: absent

- name: Make target filesystem tree
  file:
    path: "{{stack_tmp_dest_folder}}/{{item}}"
    state: directory
  loop: "{{relative_folders + [ '' ]}}"

############# Templatize and copy stack

- name: "Templatize docker stack {{stack_name}}"
  template:
    src: "{{stack_src_folder}}/{{item}}"
    dest: "{{stack_tmp_dest_folder}}/{{item}}"
  loop: "{{relative_files}}"
  when: "item not in exclude_from_templating"

- name: "Copy docker stack {{stack_name}}"
  copy:
    src: "{{stack_src_folder}}/{{item}}"
    dest: "{{stack_tmp_dest_folder}}/{{item}}"
  loop: "{{relative_files}}"
  when: "item in exclude_from_templating"

############### Deploy command
####### Sane check on docker compose files

- name: "Check if docker compose files exists"
  vars:
    prefix: "{{stack_tmp_dest_folder}}/"
    _docker_compose_files: "{{ docker_compose_files | map('regex_replace', '^', prefix) | list  }}"
  ansible.builtin.stat:
    path: "{{ item }}"
  loop: "{{ _docker_compose_files }}"
  register: docker_compose_files_statuses

- name: "Retain only existing docker compose files"
  set_fact:
    existing_docker_compose_files: >-
      {{ docker_compose_files_statuses.results
         | selectattr('stat.exists', 'defined')
         | selectattr('stat.exists')
         | map(attribute='stat.path')
         | list }}

- name: "Fail if no compose files available"
  ansible.builtin.fail:
    msg: "No existing docker-compose files. Aborting."
  when: existing_docker_compose_files | length == 0

- name: Debug - docker-compose files
  debug:
    var: existing_docker_compose_files

- name: "Deploy {{stack_name}}"  
  docker_stack:
    state: present
    name: "{{stack_name}}"
    docker_host: "{{docker_host}}"
    with_registry_auth: true
    compose: "{{existing_docker_compose_files}}"

############# Copy resolved stacks
###
- name: "Copy stack folder"
  copy:
    src: "{{stack_tmp_dest_folder}}"
    dest: "{{copy_stack_files_to}}"
  when: copy_stack_files_to != ''

############# Cleanups

- name: Cleanup tmp stack dest folder
  file:
    path: "{{stack_tmp_dest_folder}}"
    state: absent